name: Build

on:
  push:
    branches: ["main"]
  pull_request:
    branches:
      - main

jobs:
  clang-format:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run clang-format style check for C/C++/Protobuf programs.
        uses: jidicula/clang-format-action@v4.13.0
        with:
          clang-format-version: '18'
          exclude-regex: 'bin'
          fallback-style: 'Google'

  cmake-format:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Format CMake files
        id: cmake-format
        uses: PuneetMatharu/cmake-format-lint-action@v1.0.4
        with:
          args: --config-files .cmake-format.yaml --check

  build:
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows Latest MSVC",
            os: windows-latest,
            tag: msvc,
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
            }
          - {
              name: "Ubuntu Latest GCC",
              os: ubuntu-22.04,
              tag: gnu,
              cc: "gcc",
              cxx: "g++"
            }
          - {
              name: "Ubuntu Latest CLang",
              os: ubuntu-22.04,
              tag: "clang",
              cc: "clang",
              cxx: "clang++"
            }

    name: ${{ matrix.config.name }}
    needs: [clang-format, cmake-format]
    runs-on: ${{ matrix.config.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: "true"

      - name: Get tags
        run: git fetch --tags origin

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: sudo apt install -y gcc-12 g++-12 clang-15 ninja-build qtbase5-dev libqt5svg5-dev python3-pip grep

      - name: Install Qt (Windows)
        if: runner.os == 'Windows'
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: '==3.1.*'
          dir: '${{github.workspace}}/Qt/'
          install-deps: 'true'
          version: '5.15.2'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'
          archives: 'qtwinextras qtsvg qtbase icu'
          cache: 'true'
          cache-key-prefix: 'install-qt-action'

      - name: Install conan (Ubuntu)
        if: runner.os == 'Linux'
        run: sudo pip install conan

      - name: Install conan (Windows)
        if: runner.os == 'Windows'
        run: python -m pip install conan && conan profile detect
        shell: bash

      - name: Cache Conan packages (Ubuntu)
        if: runner.os == 'Linux'
        uses: actions/cache@v2
        with:
          path: ~/.conan2
          key: conan-${{ runner.os }}-${{ matrix.config.tag }}-${{ hashFiles('**/conanfile.txt') }}

      - name: Cache Conan packages (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v2
        with:
          path: "C:\\Users\\runneradmin\\.conan2\\"
          key: conan-${{ runner.os }}-${{ matrix.config.tag }}-${{ hashFiles('**/conanfile.txt') }}

      - name: Install conan dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: conan install . -s build_type=Release -of .conan/${{ matrix.config.cc }} --build=missing -pr:a .conan/${{ matrix.config.cc }}/profile

      - name: Install conan dependencies (Windows)
        if: runner.os == 'Windows'
        run: conan install . --build missing -s build_type=Release -s compiler.cppstd=20 -c tools.cmake.cmaketoolchain:generator=Ninja -of .conan/msvc/
        shell: bash

      - name: Configure CMake (Ubuntu)
        if: runner.os == 'Linux'
        run: cmake --preset="ci_${{ matrix.config.tag }}_release"

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        env:
          CMAKE_PREFIX_PATH: ${{env.Qt5_DIR}}
        run: |
          call "${{ matrix.config.environment_script }}"
          cmake --preset="ci_${{ matrix.config.tag }}_release"
        shell: cmd

      - name: Build (Ubuntu)
        if: runner.os == 'Linux'
        run: cmake --build ${{github.workspace}}/build | tee ${{github.workspace}}/build/build.log

      - name: Build (Windows)
        if: runner.os == 'Windows'
        run: |
          call "${{ matrix.config.environment_script }}"
          cmake --build ${{github.workspace}}/build
        shell: cmd

      - name: Count warnings (Ubuntu)
        if: runner.os == 'Linux'
        run: grep -c "warning:" ${{github.workspace}}/build/build.log

      - name: Test
        run: ctest -Q --test-dir ${{github.workspace}}/build --output-junit ${{github.workspace}}/build/report.xml

      - name: Publish Test Report for ${{ matrix.config.name }}
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: ${{github.workspace}}/build/report.xml
          include_passed: true
          detailed_summary: true
