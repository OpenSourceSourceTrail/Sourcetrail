name: Manual Build with Clazy Analysis

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      clazy_checks:
        description: 'Clazy checks'
        required: false
        default: 'qt6-deprecated-api-fixes,qt6-header-fixes,qt6-qhash-signature,qt6-fwd-fixes,missing-qobject-macro'

env:
  CLAZY_CHECKS: ${{ github.event.inputs.clazy_checks }}

jobs:
  build:
    runs-on: ubuntu-24.04
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update

          # Install gcc/clang
          sudo apt-get install -y gcc g++ clang

          # Install Qt5
          sudo apt-get install -y qtbase5-dev libqt5svg5-dev
          
          # Install Ninja
          sudo apt-get install -y ninja-build
          
          # Install Clazy
          sudo apt-get install -y clazy

          # Install pip
          sudo apt-get install -y python3-pip
          
          # Verify installed versions
          cmake --version
          clazy --version
          ninja --version
          pip --version

      - name: Install conan
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install conan

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: ~/.conan2
          key: conan-Linux-clang-${{ hashFiles('**/conanfile.txt') }}

      - name: Install conan dependencies
        run: |
          source venv/bin/activate
          conan install . -s build_type=Release -of .conan/clang --build=missing -pr:a .conan/clang/profile
      
      - name: Configure with Clazy
        run: cmake --preset="clazy"
        
      - name: Run Clazy-standalone
        run: |
          # Create output directory
          mkdir -p clazy-results
          
          # Get list of cpp files to analyze
          find src -type f -name "*.h" -o -name "*.hpp" -o -name "*.cpp" -not -path "*test*" > cpp_files.txt
          
          # Run clazy-standalone with the specified checks
          cat cpp_files.txt | xargs clazy-standalone \
            --checks=${{ github.event.inputs.clazy_checks }} \
            -p build/compile_commands.json \
            > clazy-results/clazy-output.txt 2>&1 || true
          
          # Generate summary
          echo "# Clazy Analysis Summary" > clazy-results/summary.md
          echo "## Configuration" >> clazy-results/summary.md
          echo "- Checks: ${{ github.event.inputs.clazy_checks }}" >> clazy-results/summary.md
          echo "- Path: ${{ github.event.inputs.path }}" >> clazy-results/summary.md
          echo "## Results" >> clazy-results/summary.md
          WARNINGS=$(grep -c "warning:" clazy-results/clazy-output.txt || echo "0")
          echo "- Total warnings: $WARNINGS" >> clazy-results/summary.md
          
          # List all warning types
          echo "## Warning Categories" >> clazy-results/summary.md
          grep "warning:" clazy-results/clazy-output.txt | sed 's/.*\[\(.*\)\].*/\1/' | sort | uniq -c | sort -nr | \
            awk '{print "- " $1 " occurrences: " $2}' >> clazy-results/summary.md
      
      - name: Archive analysis results
        uses: actions/upload-artifact@v4
        with:
          name: clazy-analysis
          path: clazy-results/
      
      - name: Check for warnings
        run: |
          # Display summary in the log
          cat clazy-results/summary.md
          
          # Count warnings
          WARNINGS=$(grep -c "warning:" clazy-results/clazy-output.txt || echo "0")
          echo "Found $WARNINGS warnings"
          
          # Optional: fail the workflow if warnings exceed a threshold
          # if [ "$WARNINGS" -gt "10" ]; then
          #   echo "::error::Clazy found $WARNINGS warnings, exceeding the threshold of 10!"
          #   exit 1
          # fi
