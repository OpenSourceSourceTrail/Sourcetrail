name: Manual Clang 15 Build and Cache

on:
  workflow_dispatch:
    inputs:
      clang_version:
        description: 'Clang version to build'
        required: false
        default: '15.0.7'

env:
  CLANG_VERSION: ${{ github.event.inputs.clang_version || '15.0.7' }}
  INSTALL_DIR: ${{ github.workspace }}/clang-install
  CACHE_KEY: clang-15-build-${{ github.ref_name }}

jobs:
  build-clang:
    runs-on: ubuntu-latest
    steps:
      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            curl \
            cmake \
            ninja-build \
            python3 \
            gcc \
            g++ \
            libncurses5-dev \
            libzip-dev

      - name: Check Cache
        id: clang-cache
        uses: actions/cache@v4
        with:
          path: ${{ env.INSTALL_DIR }}
          key: ${{ env.CACHE_KEY }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ env.CACHE_KEY }}

      - name: Download LLVM/Clang Source
        if: steps.clang-cache.outputs.cache-hit != 'true'
        run: |
          curl -o llvmorg-15.0.7.tar.gz https://codeload.github.com/llvm/llvm-project/tar.gz/refs/tags/llvmorg-${CLANG_VERSION}
          tar -xzf llvmorg-${CLANG_VERSION}.tar.gz
          mv llvm-project-llvmorg-${CLANG_VERSION} llvm-project

      - name: Configure CMake
        if: steps.clang-cache.outputs.cache-hit != 'true'
        working-directory: llvm-project
        run: |
          cmake -S llvm -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} \
            -DLLVM_ENABLE_PROJECTS:STRING=clang \
            -DLLVM_ENABLE_RTTI:BOOL=ON \
            -DCLANG_LINK_CLANG_DYLIB:BOOL=ON \
            -DLLVM_LINK_LLVM_DYLIB:BOOL=ON \
            -DLLVM_TARGETS_TO_BUILD=host

      - name: Build Clang
        if: steps.clang-cache.outputs.cache-hit != 'true'
        working-directory: llvm-project/build
        run: |
          ninja

      - name: Install Clang
        if: steps.clang-cache.outputs.cache-hit != 'true'
        working-directory: llvm-project/build
        run: |
          ninja install

      - name: Compress Clang Installation
        if: steps.clang-cache.outputs.cache-hit != 'true'
        run: |
          tar -czvf clang-${CLANG_VERSION}-linux.tar.gz -C ${{ env.INSTALL_DIR }} .

      - name: Upload Clang Artifact
        uses: actions/upload-artifact@v4
        with:
          name: clang-${{ env.CLANG_VERSION }}-linux
          path: clang-${{ env.CLANG_VERSION }}-linux.tar.gz

      - name: Cleanup
        run: |
          rm -rf llvm-project
          rm llvmorg-${CLANG_VERSION}.tar.gz
